/* rename to ".boot0" to run at startup
E.kickWatchdog();
function KickWd(){
  if( (typeof(BTN1)=='undefined')||(!BTN1.read()) ) E.kickWatchdog();
}
var wdint=setInterval(KickWd,5000);
E.enableWatchdog(20, false);
let _S = require("Storage");
if(_S.read("C20.js")) eval(_S.read("C20.js"));
*/
// rename to ".boot0" to run at startup
E.enableWatchdog(10);

const _S = require("Storage");
// set GPIOs
let n0 = new Uint32Array([
  0x00000002, 0x00000002, 0x00000002, 0x00000003, 0x00000001, 0x00000003, 0x00000003, 0x00000003, 
  0x00000000, 0x00000000, 0x00030000, 0x00000003, 0x00000003, 0x00020000, 0x0000060c, 0x0000060d, 
  0x00000003, 0x00000003, 0x00000003, 0x00000003, 0x00000002, 0x00000002, 0x00000002, 0x00000002, 
  0x00000002, 0x00000002, 0x00000003, 0x00000001, 0x00000003, 0x0000000c, 0x00000002, 0x00000002, 
  ]);
for(let p=0; p<32; p++) { 
  //  poke32(0x50000700+4*p, n0[p]);
}
// turn off HRS LEDs
D17.set(); D18.set();

if((new Date()).getFullYear() < 2020) {
    setTimeout(()=>{
      require("~setTime.js").setDtTz();
    }, 5*1000);
} else {
  let dz=Date();
  let m = dz.getMonth(), d=dz.getDate(), dow=dz.getDay();
  //if(m<2 || m>10) dz=-5;
  dz=-5;
  if(m>2 && m<10) dz=-4;
  if((m == 2) && (d-dow > 7)) dz=-4;
  if ((m == 10) && (d-dow <= 0)) dz=-4;
  E.setTimeZone(dz);
};

E.at = (timeStr, func) => {
  if(timeStr.indexOf("T") < 0) { timeStr = Date().toISOString().substring(0,11)+timeStr;}
  let delay = Math.floor((new Date(timeStr)).getTime() - (new Date()).getTime());
  if (delay < 0) delay += 24*60*60*1000;
  //print("thats in "+delay/1000);
  return( setTimeout(func, delay));
};


eval(_S.read(process.env.BOARD+".js"));